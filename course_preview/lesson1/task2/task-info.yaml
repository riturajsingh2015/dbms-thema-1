type: edu
files:
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;
    import static org.junit.Assert.assertEquals;

    public class Tests {
      JavaPostgreSqlWriteImage img_rw= new JavaPostgreSqlWriteImage();
      @Test
      public void testSolution() {
        // put your test here

        assertEquals("DROP query incorrect","DROP TABLE IF EXISTS images", img_rw.getDROP());
        assertEquals("CREATE query incorrect","CREATE TABLE IF NOT EXISTS images(id serial, data bytea)", img_rw.getCREATE());
        assertEquals("INSERT query incorrect","INSERT INTO images(data) VALUES(?)", img_rw.getINSERT());

      }
    }
  learner_created: false
- name: src/JdbcConnection.java
  visible: true
  text: |-
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    public class JdbcConnection {
        String url = "jdbc:postgresql://localhost:5432/test";
        String user = "postgres";
        String password = "postgresql_786";

        public String getUrl() {
            return url;
        }

        public String getUser() {
            return user;
        }

        public String getPassword() {
            return password;
        }

        private static final Logger LOGGER =
                Logger.getLogger(JdbcConnection.class.getName());
        private static Connection connection = null;

        public static Connection getConnection() {
                try {
                    JdbcConnection jdbc = new JdbcConnection();
                    connection = DriverManager.getConnection(jdbc.url, jdbc.user, jdbc.password);
                } catch (SQLException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                }
            return connection;
        }

    }
  learner_created: false
- name: src/JavaPostgreSqlWriteImage.java
  visible: true
  placeholders:
  - offset: 226
    length: 25
    placeholder_text: Write the Drop query here
    initial_state:
      length: 25
      offset: 226
    initialized_from_dependency: false
    selected: false
    status: Failed
    encrypted_possible_answer: DROP TABLE IF EXISTS images
  - offset: 275
    length: 27
    placeholder_text: Write the Create query here
    initial_state:
      length: 27
      offset: 275
    initialized_from_dependency: false
    selected: false
    status: Failed
    encrypted_possible_answer: CREATE TABLE IF NOT EXISTS images(id serial, data bytea)
  - offset: 325
    length: 27
    placeholder_text: Write the Insert query here
    initial_state:
      length: 27
      offset: 325
    initialized_from_dependency: false
    selected: false
    status: Failed
    encrypted_possible_answer: INSERT INTO images(data) VALUES(?)
  text: |-
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.sql.*;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    public class JavaPostgreSqlWriteImage {

        String DROP = "Write the Drop query here";
        String CREATE = "Write the Create query here";
        String INSERT ="Write the Insert query here";

        public String getDROP() {
            return DROP;
        }

        public String getCREATE() {
            return CREATE;
        }

        public String getINSERT() {
            return INSERT;
        }

        public static void main(String[] args) {
            //Verbindung mit DB

            Connection con = JdbcConnection.getConnection();
            //Erställt eine neue Instanz aus JavapostgreSQLWriteImage Klasse

            JavaPostgreSqlWriteImage img_rw = new JavaPostgreSqlWriteImage();
              /* mithilfe vorbereitete Anweisungen,verwenden wir Platzhalter,
            anstatt die Werte direkt in die Anweisungen zu schreiben.
            damit versuchen wir,Drop und Create durchzuführen
             */
            try(PreparedStatement pst = con.prepareStatement(img_rw.INSERT)) {
                Statement stmt = con.createStatement();
                stmt.executeUpdate(img_rw.DROP);
                System.out.println("Existing Table Droppped");
                stmt.executeUpdate(img_rw.CREATE);
                System.out.println("New Table Created");
                File img = new File("resources/pulp.jpg");
                //versucht,neus Bild zu DB hinzufügen
                try (FileInputStream fin = new FileInputStream(img)) {
                    /*
                    Die Umwandlung in (int) ist erforderlich,
                    da es in JDBC 4 auch eine Version dieser Methode mit a (int, long) gibt.
                    */
                    pst.setBinaryStream(1, fin, (int) img.length());
                    pst.executeUpdate();
                    System.out.println("Image added to Database");
                }
                //Im Falle einer Ausnahme protokollieren wir die Fehlermeldung
                catch (IOException ex) {
                    Logger.getLogger(JavaPostgreSqlWriteImage.class.getName()).log(
                            Level.SEVERE, ex.getMessage(), ex);
                }
            con.close();
            }
            //Im Falle einer Ausnahme protokollieren wir die Fehlermeldung
            catch (SQLException ex) {
                Logger lgr = Logger.getLogger(JavaPostgreSqlWriteImage.class.getName());
                lgr.log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
    }
  learner_created: false
status: Failed
feedback:
  message: DROP query incorrect
  time: Fri, 04 Jun 2021 14:25:38 UTC
  expected: DROP TABLE IF EXISTS images
  actual: Write the Drop query here
record: -1
