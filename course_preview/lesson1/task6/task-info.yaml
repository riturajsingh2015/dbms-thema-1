type: theory
files:
- name: src/CRUD_READ.java
  visible: true
  text: |-
    public class CRUD_READ {
       public static void main(String[] args) {
          // über die Schnittstelle(UserDao)  auf
          // die konkrete Klasse(UserDaoImpl)  zugreifen.
          UserDao userDao = new UserDaoImpl();
          //Holen Sie sich den Benutzer mit der id =1
          //und zeigen Sie seine Details an
          try{
             User u2=userDao.getUser(2);
             System.out.println(u2.getId()+"\t"+u2.getName()+"\t"+u2.getPass()+"\t"+u2.getAge());
          }
          catch (NullPointerException e)
          {
             System.out.println("NULL");
          }


       }
    }
  learner_created: false
- name: src/JdbcConnection.java
  visible: true
  text: |-
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    public class JdbcConnection {
        String url = "jdbc:postgresql://localhost:5432/test";
        String user = "postgres";
        String password = "postgresql_786";

        public String getUrl() {
            return url;
        }

        public String getUser() {
            return user;
        }

        public String getPassword() {
            return password;
        }

        private static final Logger LOGGER =
                Logger.getLogger(JdbcConnection.class.getName());
        private static Connection connection = null;

        public static Connection getConnection() {
            try {
                JdbcConnection jdbc = new JdbcConnection();
                connection = DriverManager.getConnection(jdbc.url, jdbc.user, jdbc.password);
            } catch (SQLException ex) {
                LOGGER.log(Level.SEVERE, null, ex);
            }
            return connection;
        }

    }
  learner_created: false
- name: src/User.java
  visible: true
  text: |-
    public class User {

        private Integer id;
        private String name;
        private String pass;
        private Integer age;

        public User() {
        }

        public User(String name, String pass, Integer age) {
            this.name = name;
            this.pass = pass;
            this.age = age;
        }

        public User(Integer id, String name, String pass, Integer age) {
            this.id = id;
            this.name = name;
            this.pass = pass;
            this.age = age;
        }

        public Integer getAge() {
            return age;
        }

        public void setAge(Integer age) {
            this.age = age;
        }

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getPass() {
            return pass;
        }

        public void setPass(String pass) {
            this.pass = pass;
        }

    }
  learner_created: false
- name: src/UserDao.java
  visible: true
  text: |-
    public interface UserDao {
        boolean insertUser(User user);
        User getUser(int id);
    }
  learner_created: false
- name: src/UserDaoImpl.java
  visible: true
  text: |
    import java.sql.*;

    public class UserDaoImpl implements UserDao{
        @Override
        public boolean insertUser(User user) {
            //Datenbankverbindungsbefehl
            Connection connection = JdbcConnection.getConnection();
            try {
                PreparedStatement ps = connection.prepareStatement("INSERT INTO users VALUES (?, ?, ?, ?)");
                ps.setInt(1, user.getId());
                ps.setString(2, user.getName());
                ps.setString(3, user.getPass());
                ps.setInt(4, user.getAge());
                int i = ps.executeUpdate();
    //The executeUpdate method returns number of affected rows,
    // we expect to insert a single row thus means It should return 1, if so we return true, otherwise we return false
                if(i == 1)
                    return true;

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            return false;
        }

        @Override
        public User getUser(int id) {
            //Datenbankverbindungsbefehl
            Connection connection = JdbcConnection.getConnection();
            try {
                //Auswahlabfrage erstellen,
                // um einen Benutzer mit einer bestimmten id auszuwählen
                Statement stmt = connection.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM users WHERE id=" + id);

                if(rs.next())
                {
                    //Lesen Sie die Details des Users und geben Sie den User zurück
                    User user = new User();
                    user.setId( rs.getInt("id") );
                    user.setName( rs.getString("name") );
                    user.setPass( rs.getString("password") );
                    user.setAge( rs.getInt("age") );
                    return user;
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            return null;
        }
    }
  learner_created: false
status: Unchecked
record: -1
post_submission_on_open: true
