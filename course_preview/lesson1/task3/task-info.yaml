type: edu
files:
- name: src/JavaPostgreSqlReadImage.java
  visible: true
  placeholders:
  - offset: 310
    length: 27
    placeholder_text: Write the SELECT query here
    initial_state:
      length: 27
      offset: 310
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: SELECT data, LENGTH(data) FROM images WHERE id = 1
  - offset: 365
    length: 31
    placeholder_text: Write the output file path here
    initial_state:
      length: 31
      offset: 365
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: resources/pulp_op.jpg
  text: |-
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.sql.*;
    import java.util.logging.Level;
    import java.util.logging.Logger;
    import javax.swing.JFrame;
    import javax.swing.ImageIcon;
    import javax.swing.JLabel;


    public class JavaPostgreSqlReadImage {
        String SELECT="Write the SELECT query here";
        String op_file_name="Write the output file path here";

        public String getSELECT() {
            return SELECT;
        }

        public String getOp_file_name() {
            return op_file_name;
        }

        public static void main(String[] args) {
            //Verbindung mit DB
            Connection con = JdbcConnection.getConnection();
            //Erställt eine neue Instanz aus JavapostgreSQLReadImage Klasse
            JavaPostgreSqlReadImage img_r = new JavaPostgreSqlReadImage();
            //Versucht,ein Anweisungsobjekt zum Senden von SQL-Anweisungen an DB zu erstellen
            try(PreparedStatement pst = con.prepareStatement(img_r.SELECT);
                    /* executeQuery führt die angegebene SQL-Anweisung aus,
                die ein einzelnes ResultSet-Objekt zurückgibt
                und ResultSet ist eine Datentabelle,
                die von einer bestimmten SQL-Anweisung zurückgegeben wird.
                 */

                ResultSet rs = pst.executeQuery()) {
          /* ResultSet-Objekt behält einen Cursor bei, der auf seine aktuelle Datenzeile zeigt
                Zunächst befindet sich der Cursor vor der ersten Zeile
                Die next ()-Methode bewegt den Cursor in die nächste Zeile
                 */
                rs.next();
                File myFile = new File(img_r.op_file_name);
                //Erställt einen Dateiausgabe stream zum Schreiben in ein Dateiobjekt
                try (FileOutputStream fos = new FileOutputStream(myFile)) {
                    int len = rs.getInt(2);
                    byte[] buf = rs.getBytes("data");
                    fos.write(buf, 0, len);
                    //schreiben Sie Java-Code, um ein Bild
                    // auf dem Bildschirm anzuzeigen

                    JFrame frame = new JFrame();
                    ImageIcon icon = new ImageIcon(img_r.op_file_name);
                    JLabel label = new JLabel(icon);
                    frame.add(label);
                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    frame.pack();
                    frame.setVisible(true);
                    //jetzt machen wir die Verbindnung zu
                    con.close();
                }
            }    // Im Falle einer Ausnahme protokollieren wir die Fehlermeldung
            catch (IOException | SQLException ex) {

                Logger lgr = Logger.getLogger(JavaPostgreSqlReadImage.class.getName());
                lgr.log(Level.SEVERE, ex.getMessage(), ex);
            }



        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    import static org.junit.Assert.assertEquals;

    public class Tests {
      @Test
      public void testSolution() {
        // put your test here
        JavaPostgreSqlReadImage img_r= new JavaPostgreSqlReadImage();
        assertEquals("SELECT query incorrect","SELECT data, LENGTH(data) FROM images WHERE id = 1", img_r.getSELECT());
        assertEquals("resources/pulp_op.jpg","resources/pulp_op.jpg", img_r.getOp_file_name());

      }
    }
  learner_created: false
- name: src/JdbcConnection.java
  visible: true
  text: |-
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    public class JdbcConnection {
        String url = "jdbc:postgresql://localhost:5432/test";
        String user = "postgres";
        String password = "postgresql_786";

        public String getUrl() {
            return url;
        }

        public String getUser() {
            return user;
        }

        public String getPassword() {
            return password;
        }

        private static final Logger LOGGER =
                Logger.getLogger(JdbcConnection.class.getName());
        private static Connection connection = null;

        public static Connection getConnection() {
            try {
                JdbcConnection jdbc = new JdbcConnection();
                connection = DriverManager.getConnection(jdbc.url, jdbc.user, jdbc.password);
            } catch (SQLException ex) {
                LOGGER.log(Level.SEVERE, null, ex);
            }
            return connection;
        }

    }
  learner_created: false
status: Unchecked
record: -1
